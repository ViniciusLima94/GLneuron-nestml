/* generated by template org.nest.nestml.neuron.NeuronHeader*/

/*
*  gl_neuron.h
*
*  This file is part of NEST.
*
*  Copyright (C) 2004 The NEST Initiative
*
*  NEST is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 2 of the License, or
*  (at your option) any later version.
*
*  NEST is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#ifndef GL_NEURON
#define GL_NEURON
#include "config.h"

#ifdef HAVE_GSL
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv.h>
// forwards the declaration of the function
extern "C" inline int gl_neuron_dynamics(double, const double y[], double f[],
                                         void *pnode);

// Includes from nestkernel:
#include "archiving_node.h"
#include "connection.h"
#include "event.h"
#include "nest_types.h"
#include "ring_buffer.h"
#include "universal_data_logger.h"

// Includes from sli:
#include "dictdatum.h"

/* BeginDocumentation
Name: gl_neuron .



Parameters:

Remarks:
Empty

References:
Empty

Sends: nest::SpikeEvent

Receives: Spike, Current, DataLoggingRequest


SeeAlso:
Empty
*/
class gl_neuron : public nest::Archiving_Node {
public:
  /**
  * The constructor is only used to create the model prototype in the model
  * manager.
  */
  gl_neuron();

  /**
  * The copy constructor is used to create model copies and instances of the
  * model.
  * @node The copy constructor needs to initialize the parameters and the state.
  *       Initialization of buffers and interal variables is deferred to
  *       @c init_buffers_() and @c calibrate().
  */
  gl_neuron(const gl_neuron &);

  /**
  * Releases resources.
  */
  ~gl_neuron();
  /**
  * Import sets of overloaded virtual functions.
  * This is necessary to ensure proper overload and overriding resolution.
  * @see http://www.gotw.ca/gotw/005.htm.
  */
  using nest::Node::handles_test_event;
  using nest::Node::handle;

  /**
  * Used to validate that we can send nest::SpikeEvent to desired target:port.
  */
  nest::port send_test_event(nest::Node &target, nest::rport receptor_type,
                             nest::synindex, bool);

  /**
  * @defgroup mynest_handle Functions handling incoming events.
  * We tell nest that we can handle incoming events of various types by
  * defining @c handle() and @c connect_sender() for the given event.
  * @{
  */
  void handle(nest::SpikeEvent &);         //! accept spikes
  void handle(nest::CurrentEvent &);       //! accept input current
  void handle(nest::DataLoggingRequest &); //! allow recording with multimeter

  nest::port handles_test_event(nest::SpikeEvent &, nest::port);
  nest::port handles_test_event(nest::CurrentEvent &, nest::port);
  nest::port handles_test_event(nest::DataLoggingRequest &, nest::port);
  /** @} */

  // SLI communication functions:
  void get_status(DictionaryDatum &) const;
  void set_status(const DictionaryDatum &);

  // Generate function header

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_V_m() const { return S_.y[State_::V_m]; }

  inline void set_V_m(const double v) { S_.y[State_::V_m] = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_V_r() const { return P_.V_r; }

  inline void set_V_r(const double v) { P_.V_r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_V_t() const { return P_.V_t; }

  inline void set_V_t(const double v) { P_.V_t = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_V_s() const { return P_.V_s; }

  inline void set_V_s(const double v) { P_.V_s = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_tau_m() const { return P_.tau_m; }

  inline void set_tau_m(const double v) { P_.tau_m = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_r() const { return P_.r; }

  inline void set_r(const double v) { P_.r = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_gamma() const { return P_.gamma; }

  inline void set_gamma(const double v) { P_.gamma = v; }

  /* generated by template org.nest.nestml.function.MemberVariableGetterSetter*/

  inline double get_delta() const { return P_.delta; }

  inline void set_delta(const double v) { P_.delta = v; }

  inline nest::RingBuffer &get_I_inj() { return B_.get_I_inj(); };
  inline nest::RingBuffer &get_I_syn() { return B_.get_I_syn(); };

protected:
  //! Reset parameters and state of neuron.

  //! Reset state of neuron.
  void init_state_(const Node &proto);

  //! Reset internal buffers of neuron.
  void init_buffers_();

  //! Initialize auxiliary quantities, leave parameters and state untouched.
  void calibrate();

  //! Take neuron through given time interval
  void update(nest::Time const &, const long, const long);

  // The next two classes need to be friends to access the State_ class/member
  friend class nest::RecordablesMap<gl_neuron>;
  friend class nest::UniversalDataLogger<gl_neuron>;

  /**
  * Free parameters of the neuron.
  *
  * # Initialize with RS parameters
  *
  * These are the parameters that can be set by the user through @c SetStatus.
  * They are initialized from the model prototype when the node is created.
  * Parameters do not change during calls to @c update() and are not reset by
  * @c ResetNetwork.
  *
  * @note Parameters_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If Parameters_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If Parameters_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct Parameters_ {
    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double V_r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double V_t; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double V_s; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double tau_m; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double r; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double gamma; //

    /* generated by template org.nest.nestml.function.MemberDeclaration*/

    double delta; //

    /** Initialize parameters to their default values. */
    Parameters_();

    /** Set parameter values from dictionary. */
    void set(const DictionaryDatum &);

    // TODO only for invariants
    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_V_r() const { return V_r; }
    inline void set_V_r(const double V_r) { this->V_r = V_r; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_V_t() const { return V_t; }
    inline void set_V_t(const double V_t) { this->V_t = V_t; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_V_s() const { return V_s; }
    inline void set_V_s(const double V_s) { this->V_s = V_s; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_tau_m() const { return tau_m; }
    inline void set_tau_m(const double tau_m) { this->tau_m = tau_m; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_r() const { return r; }
    inline void set_r(const double r) { this->r = r; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_gamma() const { return gamma; }
    inline void set_gamma(const double gamma) { this->gamma = gamma; }

    /* generated by template org.nest.nestml.function.StructGetterSetter*/

    inline double get_delta() const { return delta; }
    inline void set_delta(const double delta) { this->delta = delta; }
  };

  /**
  * Dynamic state of the neuron.
  *
  *
  *
  * These are the state variables that are advanced in time by calls to
  * @c update(). In many models, some or all of them can be set by the user
  * through @c SetStatus. The state variables are initialized from the model
  * prototype when the node is created. State variables are reset by @c
  * ResetNetwork.
  *
  * @note State_ need neither copy constructor nor @c operator=(), since
  *       all its members are copied properly by the default copy constructor
  *       and assignment operator. Important:
  *       - If State_ contained @c Time members, you need to define the
  *         assignment operator to recalibrate all members of type @c Time . You
  *         may also want to define the assignment operator.
  *       - If State_ contained members that cannot copy themselves, such
  *         as C-style arrays, you need to define the copy constructor and
  *         assignment operator to copy those members.
  */
  struct State_ {
    //! Symbolic indices to the elements of the state vector y
    enum StateVecElems { V_m, STATE_VEC_SIZE };
    //! state vector, must be C-array for GSL solver
    double y[STATE_VEC_SIZE];

    State_();

    /**
    * Set state values from dictionary.
    */
    void set(const DictionaryDatum &, const Parameters_ &);
  };

  /**
  * Internal variables of the neuron.
  *
  *
  *
  * These variables must be initialized by @c calibrate, which is called before
  * the first call to @c update() upon each call to @c Simulate.
  * @node Variables_ needs neither constructor, copy constructor or assignment
  * operator,
  *       since it is initialized by @c calibrate(). If Variables_ has members
  * that
  *       cannot destroy themselves, Variables_ will need a destructor.
  */
  struct Variables_ {};

  /**
    * Buffers of the neuron.
    * Ususally buffers for incoming spikes and data logged for analog recorders.
    * Buffers must be initialized by @c init_buffers_(), which is called before
    * @c calibrate() on the first call to @c Simulate after the start of NEST,
    * ResetKernel or ResetNetwork.
    * @node Buffers_ needs neither constructor, copy constructor or assignment
   * operator,
    *       since it is initialized by @c init_nodes_(). If Buffers_ has members
   * that
    *       cannot destroy themselves, Buffers_ will need a destructor.
    */
  struct Buffers_ {
    Buffers_(gl_neuron &);
    Buffers_(const Buffers_ &, gl_neuron &);

    inline nest::RingBuffer &get_I_inj() { return I_inj; }
    nest::RingBuffer I_inj;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double I_inj_last_value_;
    inline nest::RingBuffer &get_I_syn() { return I_syn; }
    nest::RingBuffer I_syn;
    //!< Buffer incoming Buffers through delay, as sum
    ;
    double I_syn_last_value_;

    /** Logger for all analog data */
    nest::UniversalDataLogger<gl_neuron> logger_;

    std::vector<long> receptor_types_;

    /* GSL ODE stuff */
    gsl_odeiv_step *s_;    //!< stepping function
    gsl_odeiv_control *c_; //!< adaptive stepsize control function
    gsl_odeiv_evolve *e_;  //!< evolution function
    gsl_odeiv_system sys_; //!< struct describing system
  };

private:
  /**
  * @defgroup pif_members Member variables of neuron model.
  * Each model neuron should have precisely the following four data members,
  * which are one instance each of the parameters, state, buffers and variables
  * structures. Experience indicates that the state and variables member should
  * be next to each other to achieve good efficiency (caching).
  * @note Devices require one additional data member, an instance of the @c
  * Device
  *       child class they belong to.
  * @{
  */
  Parameters_ P_; //!< Free parameters.
  State_ S_;      //!< Dynamic state.
  Variables_ V_;  //!< Internal Variables
  Buffers_ B_;    //!< Buffers.

  //! Mapping of recordables names to access functions
  static nest::RecordablesMap<gl_neuron> recordablesMap_;

  friend int gl_neuron_dynamics(double, const double y[], double f[],
                                void *pnode);
  /** @} */
}; /* neuron gl_neuron */

inline nest::port gl_neuron::send_test_event(nest::Node &target,
                                             nest::rport receptor_type,
                                             nest::synindex, bool) {
  // You should usually not change the code in this function.
  // It confirms that the target of connection @c c accepts @c nest::SpikeEvent
  // on
  // the given @c receptor_type.
  nest::SpikeEvent e;
  e.set_sender(*this);

  return target.handles_test_event(e, receptor_type);
}

inline nest::port gl_neuron::handles_test_event(nest::SpikeEvent &,
                                                nest::port receptor_type) {

  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c SpikeEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}

inline nest::port gl_neuron::handles_test_event(nest::CurrentEvent &,
                                                nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c CurrentEvent on port 0. You need to extend the function
  // if you want to differentiate between input ports.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());
  return 0;
}
inline nest::port gl_neuron::handles_test_event(nest::DataLoggingRequest &dlr,
                                                nest::port receptor_type) {
  // You should usually not change the code in this function.
  // It confirms to the connection management system that we are able
  // to handle @c DataLoggingRequest on port 0.
  // The function also tells the built-in UniversalDataLogger that this node
  // is recorded from and that it thus needs to collect data during simulation.
  if (receptor_type != 0)
    throw nest::UnknownReceptorType(receptor_type, get_name());

  return B_.logger_.connect_logging_device(dlr, recordablesMap_);
}

// TODO call get_status on used or internal components
inline void gl_neuron::get_status(DictionaryDatum &__d) const {
  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "V_r", get_V_r());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "V_t", get_V_t());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "V_s", get_V_s());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "tau_m", get_tau_m());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "r", get_r());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "gamma", get_gamma());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "delta", get_delta());

  /* generated by template org.nest.nestml.function.WriteInDictionary*/

  def<double>(__d, "V_m", get_V_m());

  (*__d)[nest::names::recordables] = recordablesMap_.get_list();
}

inline void gl_neuron::set_status(const DictionaryDatum &__d) {

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_V_r;
  if (updateValue<double>(__d, "V_r", tmp_V_r)) {
    set_V_r(tmp_V_r);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_V_t;
  if (updateValue<double>(__d, "V_t", tmp_V_t)) {
    set_V_t(tmp_V_t);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_V_s;
  if (updateValue<double>(__d, "V_s", tmp_V_s)) {
    set_V_s(tmp_V_s);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_tau_m;
  if (updateValue<double>(__d, "tau_m", tmp_tau_m)) {
    set_tau_m(tmp_tau_m);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_r;
  if (updateValue<double>(__d, "r", tmp_r)) {
    set_r(tmp_r);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_gamma;
  if (updateValue<double>(__d, "gamma", tmp_gamma)) {
    set_gamma(tmp_gamma);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_delta;
  if (updateValue<double>(__d, "delta", tmp_delta)) {
    set_delta(tmp_delta);
  }

  /* generated by template org.nest.nestml.function.ReadFromDictionary*/

  double tmp_V_m;
  if (updateValue<double>(__d, "V_m", tmp_V_m)) {
    set_V_m(tmp_V_m);
  }

  // We now know that (ptmp, stmp) are consistent. We do not
  // write them back to (P_, S_) before we are also sure that
  // the properties to be set in the parent class are internally
  // consistent.
  Archiving_Node::set_status(__d);

  // if we get here, temporaries contain consistent set of properties
  // P_ = ptmp;
  // S_ = stmp;
};

#endif /* #ifndef GL_NEURON */
#endif /* HAVE GSL */
